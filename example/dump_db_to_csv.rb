#!/usr/bin/ruby

# Copyright (c) 2014 National ICT Australia Limited (NICTA).
# This software may be used and distributed solely under the terms of the MIT license (License).
# You should find a copy of the License in LICENSE.TXT or at http://opensource.org/licenses/MIT.
# By downloading or using this software you accept the terms and the liability disclaimer in the License.

# Simple example of a script to dump an entire experiment database from a
# PostreSQL server into ZIP file, which contains a separate CSV file for 
# each table in the database
# 
# This could be used to customise the 'Download/Dump Data' button of the 
# 'Execute' panel of Labwiki.
#
# This requires zip and psql command line apps to be available on the path

support = "foo@foo.com" # Address to send an email if something goes wrong

pdb=ARGV[0] # The only argument to that script is the database name
file="/var/www/#{pdb}.zip" # Path to the output file
phost = "foo.com" # Hostname for the PostgreSQL server holding the data
pport = "5432" # Port for the PostreSQL server
puser = "bar" # PostgreSQL user to use
#  PSQL password: either use a pgpass file or set the PGPASSWORD env variable

begin
  # Get list of all tables from the database, filter out tables generated by
  # the OMF EC for this simple example.
  tables = `psql -h #{phost} -p #{pport} -U #{puser} #{pdb} -c "COPY (SELECT table_name FROM information_schema.tables WHERE table_schema = 'public') TO STDOUT" | grep -v omf_ec`
  raise "Cannot open database '#{pdb}'" if tables.nil? || tables.length==0 || tables == ''
  # Dump each table into a separate CSV file and add that to the ZIP file
  tables.each_line do |t|
    out = `psql -h #{phost} -p #{pport} -U #{puser} #{pdb} -c "COPY (SELECT * FROM #{t.chomp}) TO STDOUT CSV HEADER" > #{t.chomp}.csv`
    `zip #{file} #{t.chomp}.csv`
    `rm -f #{t.chomp}.csv`
    raise "Cannot export table '#{t}' (from the list: '#{tables}') - error: '#{out}'" unless out.length==0
  end
rescue Exception => ex
  # If anything goes wrong above, generate a README file with the error
  # and its trace, and ask the user to email that to the address given above
  log="README.TXT"
  File.open(log, "w") do |f|
    f.puts("We are sorry but we could not export the database for your experiment #{pdb}")
    f.puts("Please email this file with the error details below to #{support}")
    f.puts("")
    f.puts("----")
    f.puts("Exception (#{ex.class}) - #{ex}")
    f.puts("#{ex.backtrace}")
  end
  `zip #{file} README.TXT`
end
